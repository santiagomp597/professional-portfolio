---
import AngularIcon from "./icons/Angular.astro";
import TypescriptIcon from "./icons/Typescript.astro";
import ReactIcon from "./icons/React.astro";
import GitIcon from "./icons/Git.astro";
import CssIcon from "./icons/Css.astro";
import Card from "./Card.astro";
import MongoDBIcon from "./icons/MongoDB.astro";
import NodeJSIcon from "./icons/NodeJS.astro";
import JavascriptIcon from "./icons/Javascript.astro";
import type { TechnologyItem } from "@/interfaces/translation";

const iconMap: Record<string, any> = {
  react: ReactIcon,
  angular: AngularIcon,
  javascript: JavascriptIcon,
  typescript: TypescriptIcon,
  git: GitIcon,
  nodejs: NodeJSIcon,
  mongodb: MongoDBIcon,
  css: CssIcon,
};

interface Props {
  technologyItems: TechnologyItem[];
}

const { technologyItems } = Astro.props;

const getTechnologyIcon = (techId: string): any => iconMap[techId];
---

<div class="flex flex-col mt-5">
  <article
    class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0"
  >
    <div class="w-full">
      <div class="grid grid-cols-2 lg:grid-cols-5 gap-3">
        {
          technologyItems.map((tech: TechnologyItem) => {
            const IconComponent = getTechnologyIcon(tech.id);
            return (
              <Card class={tech.cardClass}>
                <div
                  id={tech.id}
                  class="card-content flex align-middle w-full h-full py-10"
                >
                  <div class="flip-card w-full h-20 m-auto">
                    <div class="flip-card-inner">
                      <div class="flip-card-front flex align-middle">
                        {IconComponent && (
                          <IconComponent class="w-16 h-16 m-auto" />
                        )}
                      </div>
                      <div class="flip-card-back">
                        {tech.descriptionItems?.map((description: string) => (
                          <p class="text-gray-700 dark:text-gray-300">
                            {description}
                          </p>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            );
          })
        }
      </div>
    </div>
  </article>
</div>
<script>
  const ids = [
    "react",
    "angular",
    "javascript",
    "typescript",
    "git",
    "nodejs",
    "mongodb",
    "css",
  ];
  let prevId = "";
  function flipCard() {
    if (prevId) {
      const prevCard = document.getElementById(prevId);
      if (prevCard) {
        prevCard.classList.toggle("flipped");
      }
    }
    let randomId = ids[Math.floor(Math.random() * ids.length)];
    prevId = randomId;
    const card = document.getElementById(randomId);
    if (card) {
      card.classList.toggle("flipped");
    }
  }
  const flipInterval = setInterval(flipCard, 3000);
  window.addEventListener("beforeunload", () => clearInterval(flipInterval));
</script>
<style>
  .flip-card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.3s;
    transform-style: preserve-3d;
  }

  /* Do an horizontal flip when you move the mouse over the flip box container */
  .card-content:hover .flip-card-inner {
    transform: rotateY(180deg);
  }
  .flipped .flip-card-inner {
    transform: rotateY(180deg);
  }

  /* Position the front and back side */
  .flip-card-front,
  .flip-card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden; /* Safari */
    backface-visibility: hidden;
  }

  /* Style the front side (fallback if image is missing) */
  .flip-card-front {
    color: black;
  }

  /* Style the back side */
  .flip-card-back {
    color: white;
    transform: rotateY(180deg);
  }
</style>
