---
import SunIcon from "./icons/Sun.astro";
import MoonIcon from "./icons/Moon.astro";
import SystemIcon from "./icons/System.astro";
const { class: className } = Astro.props;
const THEMES = ["Light", "Dark", "System"];
---

<div class={`${className} relative  ml-1 mr-1`}>
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
 const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");
  const themeToggleBtn = document.getElementById("theme-toggle-btn");

  const getTheme = () => localStorage.getItem("theme") || "system";

  const applyTheme = () => {
    const theme = getTheme();
    const isDark = theme === "dark" || (theme === "system" && matchMedia.matches);
    
    document.documentElement.classList.toggle("dark", isDark);
    document.querySelectorAll(".theme-toggle-icon").forEach(el => {
      el.style.scale = el.id === theme ? "1" : "0";
    });
  };

  themeToggleBtn.addEventListener("click", (e) => {
    e.stopPropagation();
    themesMenu.classList.toggle("open");
  });

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  document.querySelectorAll(".themes-menu-option").forEach(el =>
    el.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      applyTheme();
    })
  );

  matchMedia.addEventListener("change", applyTheme);
  document.addEventListener("astro:after-swap", applyTheme);
  applyTheme();
</script>
